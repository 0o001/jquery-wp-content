<?php

/***************************************************************************/
/*
/* 	----------------------------------------------------------------------
/* 						DO NOT EDIT THIS FILE
/*	----------------------------------------------------------------------
/* 
/*		Themify Framework v.1.1.0
/*		http://themify.me
/*		
/*		Copyright 2011, Darcy Clarke
/*		Dual licensed under the MIT or GPL Version 2 licenses.
/*		http://themify.me/license.txt
/*
/***************************************************************************/
	
/* 	Utilities Functions
/***************************************************************************/
	
	///////////////////////////////////////////
	// Themify Documentation
	///////////////////////////////////////////
	function themify_docs(){
		echo "<script type='text/javascript'>
		      //<![CDATA[
		      window.location='http://themify.me/docs';
		      //]>
		      </script>";
	}
	
	///////////////////////////////////////////
	// Themify Page
	///////////////////////////////////////////
	function themify_page() { 
		global $data, $themify_globals;
		themify_render_template('framework_page', $data);
	}

	///////////////////////////////////////////
	// Get Skins
	///////////////////////////////////////////
	function themify_get_skins(){
		global $themify_globals;
		$theme = $themify_globals['theme'];
		$config = $themify_globals['config'];
		$data = themify_get_data();
		$output = '<input type="hidden" name="skin" value="'.$data['skin'].'">';
		if($data['skin'] == '' || !isset($data['skin'])){
			$output .= '<div class="skin-preview"><a href="#"><img src="'.get_bloginfo('template_directory').'/themify/img/non-skin.gif" alt="skin" id="" class="selected" /></a><br />No Skin</div>';
		} else {
			$output .= '<div class="skin-preview"><a href="#"><img src="'.get_bloginfo('template_directory').'/themify/img/non-skin.gif" alt="skin" id="" /></a><br />No Skin</div>';
		}
		// Open Styles Folder
		$dir = dirname(__FILE__).'/../skins';
		if(is_dir($dir)){
			if($handle = opendir($dir)){
				// Grab Folders
				while (false !== ($dirTwo = readdir($handle))){
					if($dirTwo != '.' && $dirTwo != '..'){
						// Check For Folder
						if(is_dir(str_replace('//','/',dirname(__FILE__).'/').'../skins/'.$dirTwo)){
							// Open Folders
							if($handleTwo = opendir(str_replace('//','/',dirname(__FILE__).'/').'../skins/'.$dirTwo)){
								// Grab Files
								while(false !== ($file = readdir($handleTwo))){
									$ext = substr(strrchr($file, '.'), 1); // File Extension
									//echo $file;
									if($file == 'style.css'){
										$info = themify_get_skin_info(str_replace('//','/',dirname(__FILE__).'/').'../skins/'.$dirTwo.'/'.$file);
										$fullpath = get_bloginfo('template_directory').'/skins/'.$dirTwo.'/'.$file;
										if(is_file(str_replace('//','/',dirname(__FILE__).'/').'../skins/'.$dirTwo.'/screenshot.png')){
											$image = get_bloginfo('template_directory').'/skins/'.$dirTwo.'/screenshot.png';
										} else {
											$image = get_bloginfo('template_directory').'/themify/img/screenshot-na.png';	
										}
										if($fullpath == $data['skin']){
											$output .= '<div class="skin-preview"><a href="#"><img src="'.$image.'" alt="skin" class="selected" id="'.get_bloginfo('template_directory').'/skins/'.$dirTwo.'/style.css" /></a><br />'.$info['Skin Name'].'</div>';
										} else {
											$output .= '<div class="skin-preview"><a href="#"><img src="'.$image.'" alt="skin" id="'.get_bloginfo('template_directory').'/skins/'.$dirTwo.'/style.css" /></a><br />'.$info['Skin Name'].'</div>';
										}
									}
								}
								closedir($handleTwo);
							}
						}
					}
				}		
				closedir($handle);
			} else {
				$themify_globals['errors']['directory'] = "Cannot open directory: '".$dir."'";
			}
		} else {
			$themify_globals['errors']['directory'] = "The string provided is not a directory: '".$dir."'";
		}
		return $output;
	}
	
	///////////////////////////////////////////
	// CSS to Array
	///////////////////////////////////////////
	function themify_css_to_array($css){
		$results = array();
		preg_match_all('/(.+?)\s?\{\s?(.+?)\s?\}/', $css, $matches);
	    foreach($matches[0] AS $i=>$original)
	        foreach(explode(';', $matches[2][$i]) AS $attr)
                if (strlen($attr) > 0){
                    list($name, $value) = explode(':', $attr);
                    $results[$matches[1][$i]][trim($name)] = trim($value);
                }
	    return $results;
	}
	
	///////////////////////////////////////////
	// Get CSS - CSS Renderer
	///////////////////////////////////////////
	function themify_get_css(){
		$data = themify_get_data();
		if($data['skin'] != ""){
			$output .= '<link href="'.$data['skin'].'" rel="stylesheet" type="text/css" />'."\n";
		}
		if(is_file(get_template_directory() . "/custom_style.css")){
			$output .=  '<link href="'.get_bloginfo('template_directory').'/custom_style.css" rel="stylesheet" type="text/css" />'."\n";
		}
		if(is_array($data)){
			foreach($data as $name => $value){	
				$array = explode('-',$name);
				$path = "";
				foreach($array as $part){
					$path .= "['$part']";
				}
				eval("\$config".$path." = \$value;");
			}
			if(is_array($config['styling'])){
				$output .= "<style type='text/css'>\n";
				foreach($config['styling'] as $nav => $value){
					foreach($value as $element => $val){
						$temp = "";
						foreach($val as $attribute => $v){
							$attribute = str_replace("_", "-", $attribute);
							if($v['value'] != '' && isset($v['value'])){
								switch($attribute){
									case "border":
										foreach($v['value'] as $key => $val){
											if($val == ''){
												if(strpos($key, "style") === false){
													if(strpos($key, "color") === false){
														$v['value'][$key] = 0;
													} else {
														$v['value'][$key] = '000000';
													}	
												} else {
													$v['value'][$key] = 'solid';
												}
											}
										}
										if($v['value']['checkbox']){
											$temp .= "border: ".$v['value']['same']."px ".$v['value']['same_style']." #".$v['value']['same_color'].";\n";
										} else {
											if($v['value']['top'] != '' && $v['value']['top_style'] != '' && $v['value']['top_color'] != ''){
												$temp .= "border-top: ".$v['value']['top']."px ".$v['value']['top_style']." #".$v['value']['top_color'].";\n";
											}
											if($v['value']['right'] != '' && $v['value']['right_style'] != '' && $v['value']['right_color'] != ''){
												$temp .= "border-right: ".$v['value']['right']."px ".$v['value']['right_style']." #".$v['value']['right_color'].";\n";
											}
											if($v['value']['bottom'] != '' && $v['value']['bottom_style'] != '' && $v['value']['bottom_color'] != ''){
											
												$temp .= "border-bottom: ".$v['value']['bottom']."px ".$v['value']['bottom_style']." #".$v['value']['bottom_color'].";\n";
											}
											if($v['value']['left'] != '' && $v['value']['left_style'] != '' && $v['value']['left_color'] != ''){
												$temp .= "border-left: ".$v['value']['left']."px ".$v['value']['left_style']." #".$v['value']['left_color'].";\n";
											}
										}
									break;
									case "background-position":
										if($v['value']['x'] != '' && $v['value']['y']){
											foreach($v['value'] as $key => $val){
												if($val == ''){
													$v['value'][$key] = 0;
												}
											}
											$temp .= $attribute.": ";
											$temp .= $v['value']['x']." ".$v['value']['y'].";\n";
										}
									break;
									case "padding":
										if($v['value']['checkbox']){
											$temp .= $attribute.": ";
											$temp .= $v['value']['same']."px".";\n";		
										} else {
											if($v['value']['top'] != '' || $v['value']['right'] != '' || $v['value']['bottom'] != '' || $v['value']['left'] != ''){
												if($v['value']['top'] != ''){
													$temp .= "padding-top: ".$v['value']['top']."px;\n";
												}
												if($v['value']['right'] != ''){
													$temp .= "padding-right: ".$v['value']['right']."px;\n";
												}
												if($v['value']['bottom'] != ''){
													$temp .= "padding-bottom: ".$v['value']['bottom']."px;\n";
												}
												if($v['value']['left'] != ''){
													$temp .= "padding-left: ".$v['value']['left']."px;\n";
												}
											}
										}
									break;
									case "margin":
										if($v['value']['checkbox']){
											$temp .= $attribute.": ";
											$temp .= $v['value']['same']."px".";\n";		
										} else {
											if($v['value']['top'] != '' || $v['value']['right'] != '' || $v['value']['bottom'] != '' || $v['value']['left'] != ''){
												if($v['value']['top'] != ''){
													$temp .= "margin-top: ".$v['value']['top']."px;\n";
												}
												if($v['value']['right'] != ''){
													$temp .= "margin-right: ".$v['value']['right']."px;\n";
												}
												if($v['value']['bottom'] != ''){
													$temp .= "margin-bottom: ".$v['value']['bottom']."px;\n";
												}
												if($v['value']['left'] != ''){
													$temp .= "margin-left: ".$v['value']['left']."px;\n";
												}
											}
										}
									break;
									case "color":
										if($v['value']['value'] != '' && $v['value']['value'] != ' '){
											$temp .= $attribute.": ";
											$temp .= "#".$v['value']['value'].";\n";
										}
									break;
									case "background-color":
										if($v['value']['transparent']){
											$temp .= $attribute.": transparent;\n";											
										} else {
											if($v['value']['value'] != '' && $v['value']['value'] != ' '){
												$temp .= $attribute.": ";
												$temp .= "#".$v['value']['value'].";\n";
											}
										}
									break;
									case "background-image":
										if($v['value']['value'] != '' && $v['value']['value'] != ' '){
											$temp .= $attribute.": ";
											$temp .= "url(".$v['value']['value'].")".";\n";
										} else if($v['value']['none'] == "on"){
											$temp .= $attribute.": ";
											$temp .= "none;\n";
										}
									break;
									case "background-repeat":
										if($v['value']['value'] != '' && $v['value']['value'] != ' '){
											$temp .= $attribute.": ";
											$temp .= $v['value']['value'].";\n";
										}
									break;
									case "font-family":
										if($v['value']['value'] != '' && $v['value']['value'] != ' '){
											$temp .= $attribute.": ";
											$temp .= $v['value']['value'].";\n";
										}
									break;
									case "line-height":
										if($v['value']['value'] != '' && $v['value']['value'] != ' '){
											$temp .= $attribute.": ";
											$temp .= $v['value']['value'].$v['value']['unit'].";\n";
										}
									break;
									case "position":
										if($v['value']['value'] != '' && $v['value']['value'] != ' '){
											$temp .= $attribute.": ";
											$temp .= $v['value']['value'].";\n";
											if($v['value']['value'] == 'absolute' || $v['value']['value'] == 'fixed'){
												if($v['value']['x_value'] != '' && $v['value']['x_value'] != ' '){
													$temp .= $v['value']['x'].": ".$v['value']['x_value']."px;\n";
												}
												if($v['value']['y_value'] != '' && $v['value']['y_value'] != ' '){
													$temp .= $v['value']['y'].": ".$v['value']['y_value']."px;\n";
												}
											}
										}
									break;
									default:
										if($v['value']['value'] != '' && $v['value']['value'] != ' '){
											$temp .= $attribute.": ";
											$temp .= $v['value']['value'];
											if(isset($v['value']['unit'])){
												$temp .= $v['value']['unit'];
											}
											$temp .= ";\n";
										}
									break;
								}
							}
						}	
						if($temp != '' && $temp != ' '){
							$output .= urldecode(themify_scrub_decode($element))." {\n";
							$output .= $temp;
							$output .= "}\n\n";
						}
					}
				}
				$output .= "</style>";
			}
		} else {
			$output = "<style type='text/css'>/* No Values in the Database */</style>";
		}
		echo "\n\n".$output;
	}
	
	///////////////////////////////////////////
	// Get Skin Info
	///////////////////////////////////////////
	function themify_get_skin_info($file){
		$fh = fopen($file, 'r');
		$data = fread($fh, filesize($file));
		$tempArray = explode("\n",themify_strip("/*", "*/", $data, 0));
		$array = array();
		foreach($tempArray as $line){
			$tempLine = explode(":", $line);
			$array[$tempLine[0]] = $tempLine[1];
		}
		fclose($fh);
		return $array;
	}
	
	///////////////////////////////////////////
	// Strip
	///////////////////////////////////////////
	function themify_strip($startTag, $endTag, $text, $pos){
		if(!is_integer($pos)){
			$pos = false;
			return false;
		}	
		$pos1 = strpos($text,$startTag,$pos);
		if(!is_integer($pos1)){
			$pos = false;
			return false;
		}
		$pos1 += strlen($startTag);
		$pos2 = strpos($text,$endTag,$pos1);
		if(!is_integer($pos2)){
			$pos = false;return false;
		}
		$res = substr($text,$pos1,$pos2-$pos1);
		$pos = $pos2 + strlen($endTag);
		return $res;
	} 
	
	///////////////////////////////////////////
	// Scrub Function
	///////////////////////////////////////////
	function themify_scrub_func($string=""){
		return str_replace(array(' ', '/', ','), array('_', '_', '-'), strtolower($string));
	}
	
	///////////////////////////////////////////
	// Scrub
	///////////////////////////////////////////
	function themify_scrub($string=""){
		return str_replace(array('#','-',' ','.',':',',','[',']','=','<','>'), array('_id_','_dash_','_space_','_class_','_colon_','_comma_','_opensquare_','_closesquare_','_equal_','_openbracket_','_closebracket_'), $string);
	}
	
	///////////////////////////////////////////
	// Scrub Decode
	///////////////////////////////////////////
	function themify_scrub_decode($string=""){
		return str_replace(array('_id_','_dash_','_space_','_class_','_colon_','_comma_','_opensquare_','_closesquare_','_equal_','_openbracket_','_closebracket_'), array('#','-',' ','.',':',',','[',']','=','<','>'), $string);
	}
	
	///////////////////////////////////////////
	// Create Settings Fieldset
	///////////////////////////////////////////
	function themify_fieldset($title="", $module="", $attr=""){
		global $themify_globals;
		$config = $themify_globals['config'];
		$data = themify_get_data();
		if(function_exists("themify_".trim($module))){
			$output = '	<fieldset><legend>'.$title.'</legend>';
			$output .=	call_user_func("themify_".trim($module), array("data"=>$data['setting'][$title],"attr"=>$attr));
			$output .= '</fieldset>';	
		} else if(function_exists(trim($module))){
			$output = '	<fieldset><legend>'.$title.'</legend>';
			$output .=	call_user_func(trim($module), array("data"=>$data['setting'][$title],"attr"=>$attr));
			$output .= '</fieldset>';	
		}
		return $output;
	}
	
	///////////////////////////////////////////
	// Create Styles Container
	///////////////////////////////////////////
	function themify_container($category="", $element=array()){
		$data = themify_get_data();
		$temp = array();
		if(is_array($data)){
			foreach($data as $name => $value){
				$array = explode('-',$name);
				$path = "";
				foreach($array as $part){
					$path .= "['$part']";
				}
				eval("\$temp".$path." = \$value;");
			}
		}
		if($element){
			$output = '	<fieldset><legend>'.$element['_a']['title'].'</legend>';
			if(is_array($element['_c']['module'])){
				if(isset($element['_c']['module']['_a']['name'])){
					$title = themify_scrub($element['_a']['selector']);
					$attr = $element['_c']['module']['_a'];
					$module = trim(str_replace(array(' ','-','|'),array('','_','hr'),$element['_c']['module']['_a']['name']));
					$value = $temp['styling'][$category][$title][$module];
					if(function_exists("themify_".$module)){
						$output .=	call_user_func("themify_".$module, array('category' => $category, 'title' => $title, 'value' => $value, 'attr' => $attr));
					} else {
						if(function_exists($module)){
							$output .=	call_user_func($module, array('category' => $category, 'title' => $title, 'value' => $value, 'attr' => $attr));	
						}
					}
				} else {
					foreach($element['_c']['module'] as $module){
						$title = themify_scrub($element['_a']['selector']);
						$attr = $module['_a'];
						$module = trim(str_replace(array(' ','-','|'),array('','_','hr'),$module['_a']['name']));
						$value = $temp['styling'][$category][$title][$module];
						if(function_exists("themify_".$module)){
							$output .=	call_user_func("themify_".$module, array('category' => $category, 'title' => $title, 'value' => $value, 'attr' => $attr));
						} else {
							if(function_exists($module)){
								$output .=	call_user_func($module, array('category' => $category, 'title' => $title, 'value' => $value, 'attr' => $attr));	
							}
						}
					}
				}
			}
			$output .= '</fieldset>';	
			return $output;
		}
	}

	///////////////////////////////////////////
	// XML 2 Array Function
	///////////////////////////////////////////
	function themify_xml2array(&$string) {
		$parser = xml_parser_create();
		xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0);
		xml_parse_into_struct($parser, $string, $vals, $index);
		xml_parser_free($parser);
		$mnary=array();
		$ary=&$mnary;
		foreach ($vals as $r) {
			$t=$r['tag'];
			if ($r['type']=='open') {
				if (isset($ary[$t])) {
					if (isset($ary[$t][0])) $ary[$t][]=array(); else $ary[$t]=array($ary[$t], array());
					$cv=&$ary[$t][count($ary[$t])-1];
				} else $cv=&$ary[$t];
				if (isset($r['attributes'])) {foreach ($r['attributes'] as $k=>$v) $cv['_a'][$k]=$v;}
				$cv['_c']=array();
				$cv['_c']['_p']=&$ary;
				$ary=&$cv['_c'];
			} elseif ($r['type']=='complete') {
				if (isset($ary[$t])) { // same as open
					if (isset($ary[$t][0])) $ary[$t][]=array(); else $ary[$t]=array($ary[$t], array());
					$cv=&$ary[$t][count($ary[$t])-1];
				} else $cv=&$ary[$t];
				if (isset($r['attributes'])) {foreach ($r['attributes'] as $k=>$v) $cv['_a'][$k]=$v;}
				$cv['_v']=(isset($r['value']) ? $r['value'] : '');
	
			} elseif ($r['type']=='close') {
				$ary=&$ary['_p'];
			}
		}    
		_themify_del_p($mnary);
		return $mnary;
	}
	
	///////////////////////////////////////////
	// _Internal: Remove recursion in result array
	///////////////////////////////////////////
	function _themify_del_p(&$ary) {
		foreach ($ary as $k=>$v) {
			if ($k==='_p') unset($ary[$k]);
			elseif (is_array($ary[$k])) _themify_del_p($ary[$k]);
		}
	}
	
	///////////////////////////////////////////
	// Array to XML
	///////////////////////////////////////////
	function themify_ary2xml($cary, $d=0, $forcetag='') {
		$res=array();
		foreach ($cary as $tag=>$r) {
			if (isset($r[0])) {
				$res[]=themify_ary2xml($r, $d, $tag);
			} else {
				if ($forcetag) $tag=$forcetag;
				$sp=str_repeat("\t", $d);
				$res[]="$sp<$tag";
				if (isset($r['_a'])) {foreach ($r['_a'] as $at=>$av) $res[]=" $at=\"$av\"";}
				$res[]=">".((isset($r['_c'])) ? "\n" : '');
				if (isset($r['_c'])) $res[]=themify_ary2xml($r['_c'], $d+1);
				elseif (isset($r['_v'])) $res[]=$r['_v'];
				$res[]=(isset($r['_c']) ? $sp : '')."</$tag>\n";
			}
			
		}
		return implode('', $res);
	}
	
	///////////////////////////////////////////
	// Insert element into array
	///////////////////////////////////////////
	function themify_ins2ary(&$ary, $element, $pos) {
		$ar1=array_slice($ary, 0, $pos); $ar1[]=$element;
		$ary=array_merge($ar1, array_slice($ary, $pos));
	}
		
	///////////////////////////////////////////
	// Create ZIP Package
	///////////////////////////////////////////
	if(class_exists('ZipArchive')){
		eval('function themify_create_zip($files = array(),$destination = "",$overwrite = false) {
			if(file_exists($destination) && !$overwrite) { return false; }
				$valid_files = array();
				if(is_array($files)) {
					foreach($files as $file) {
						if(file_exists($file)) {
							$valid_files[] = $file;
						}
					}
				}
				if(count($valid_files)) {
					$zip = new ZipArchive();
					if($zip->open($destination,$overwrite ? ZIPARCHIVE::OVERWRITE : ZIPARCHIVE::CREATE) !== true) {
					return false;
				}
				foreach($valid_files as $file) {
					$zip->addFile($file,str_replace(array("../","./"),array("",""),$file));
				}
				$zip->close();
				return file_exists($destination);
			} else {
				return false;
			}
		}');
	}
	
	///////////////////////////////////////////
	// Extract ZIP Package
	///////////////////////////////////////////
	if(class_exists('ZipArchive')){
		eval('	function themify_unzip($src_file, $dest_dir=false, $create_zip_name_dir=true, $overwrite=true){
					if(function_exists("zip_open")){   
						if(!is_resource(zip_open($src_file))){ 
							$src_file=dirname($_SERVER["SCRIPT_FILENAME"])."/".$src_file; 
						}
						if (is_resource($zip = zip_open($src_file))){          
							$splitter = ($create_zip_name_dir === true) ? "." : "/";
							if ($dest_dir === false) $dest_dir = substr($src_file, 0, strrpos($src_file, $splitter))."/";
							themify_create_dirs($dest_dir);
							while ($zip_entry = zip_read($zip)){
								$pos_last_slash = strrpos(zip_entry_name($zip_entry), "/");
								if ($pos_last_slash !== false){
									themify_create_dirs($dest_dir.substr(zip_entry_name($zip_entry), 0, $pos_last_slash+1));
								}
								if (zip_entry_open($zip,$zip_entry,"r")){
									$file_name = $dest_dir.zip_entry_name($zip_entry);
									if ($overwrite === true || $overwrite === false && !is_file($file_name)){
										$fstream = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));           
										if(!is_dir($file_name))            
										file_put_contents($file_name, $fstream );
										
										if(file_exists($file_name)){
											chmod($file_name, 0777);
											//echo "<span style=\"color:#1da319;\">file saved: </span>".$file_name."<br />";
										} else {
											//echo "<span style=\"color:red;\">file not found: </span>".$file_name."<br />";
										}
									}
									zip_entry_close($zip_entry);
								}      
							}
							zip_close($zip);
						} else {
							//echo "No Zip Archive Found.";
							return false;
						}
						themify_chmodr($dest_dir, 0755);
						return true;
					} else {
						return false;
					}
				}
				
			 	function themify_extract_zip($file){		
					$zip = zip_open($file);
					$dir = "temp/";
					if(is_resource($zip)){
						while($zip_entry = zip_read($zip)) {
							// echo $dir.basename(zip_entry_name($zip_entry));
							$fp = fopen($dir.basename(zip_entry_name($zip_entry)), "w");
							if(zip_entry_open($zip, $zip_entry, "r")) {
								$buf = zip_entry_read($zip_entry, zip_entry_filesize($zip_entry));
								fwrite($fp,"$buf");
								zip_entry_close($zip_entry);
								fclose($fp);
							}
						}
						zip_close($zip);
					} else {
						echo zipFileErrMsg($zip);		
					}
					if(file_exists($dir."config.xml")){
						unlink("../config.xml");
						rename($dir."config.xml", "../config.xml");
					}
					if(file_exists($dir."custom_modules.php")){
						unlink("../custom_modules.php");
						rename($dir."custom_modules.php","../custom_modules.php");
					}
					if(file_exists($dir."custom_widgets.php")){
						unlink("../custom_widgets.php");
						rename($dir."custom_widgets.php","../custom_widgets.php");
					}
					if(file_exists($dir."data_export.txt")){
						$handler = fopen($dir."data_export.txt", "r");
						$data = fread($handler, filesize($dir."data_export.txt"));
						set_data(unserialize($data));
						fclose($handler);
					}
				}');
	}

	///////////////////////////////////////////
	// Force Download
	///////////////////////////////////////////
	function themify_force_download($file){ 
		if((isset($file))&&(file_exists($file))){ 
		   header("Content-type: application/force-download"); 
		   header('Content-Disposition: inline; filename="' . $file . '"'); 
		   header("Content-Transfer-Encoding: Binary"); 
		   header("Content-length: ".filesize($file)); 
		   header('Content-Type: application/octet-stream'); 
		   header('Content-Disposition: attachment; filename="' . $file . '"'); 
		   readfile("$file"); 
		} else {
			return false;
		}	
	}
	
	///////////////////////////////////////////
	// Register Template
	///////////////////////////////////////////
	function themify_register_template($name, $function){
		global $themify_globals;
		if(!is_array($themify_globals['templates'])){
			$themify_globals['templates'] = array();
		}
		array_push($themify_globals['templates'], array('name'=>$name,'function'=>$function));
	}
	
	///////////////////////////////////////////
	// Render Template
	///////////////////////////////////////////
	function themify_render_template($name, $data){
		global $themify_globals;
		$check = false;
		foreach($themify_globals['templates'] as $template){
			if($template['name'] == $name){
				$check = true;
				$function = $template['function'];
			}
		}
		if($check){
			call_user_func($function, $data);
		} else {
			$themify_globals['errors']['template_'.$name] = "Template doesn't exist";
		}	
	}

	///////////////////////////////////////////
	// Build Custom Write Panels
	///////////////////////////////////////////
	function themify_build_write_panels($args){
		global $themify_globals;
		if(is_array($args)){
			$themify_globals['write_panels'] = $args;
		}
	}

	///////////////////////////////////////////
	// Image Helper - Echo Get Image
	///////////////////////////////////////////
	function themify_image($options){
		echo themify_get_image($options);
	}
	
	///////////////////////////////////////////
	// Image Helper - Return Get Image
	///////////////////////////////////////////
	function themify_get_image($args){
		global $post, $image_width, $image_height, $themify_globals;
		$config = $themify_globals['config'];
		$data = themify_get_data();
		parse_str($args, $options);
		foreach($options as $key => $val){
			$$key = $val;	
		}
		if($alt == "" && in_the_loop()){
			$alt = get_the_title();
		}
		if($crop == false || $crop == 'false'){
			$crop = "";
		} else {
			$crop = "&amp;zc=1";
		}
		$check = false;
		$q = ($q && isset($q) && $q != "") ? "&q=".$q : "";
		$ignore = (!$ignore || !isset($ignore) || $ignore == "") ? false : true;
		if($src == '' || !isset($src)){
			if($field_name != '' && isset($field_name) && in_the_loop()){
				$fields = explode(",", $field_name);
				foreach($fields as $field){
					$field = trim($field);
					if($field == "wp_thumb" && function_exists("has_post_thumbnail")){
						if(has_post_thumbnail() && !$check){
							$temp = themify_prep_image(get_the_post_thumbnail());
							$src = $temp['src'];
							$class .= " ".$temp['class'];
							if($alt == "" && $temp['alt'] != '' && isset($temp['alt'])){
								$alt = $temp['alt'];									 
							}
							$check = true;
						}
					} else {
						if(themify_check($field) && !$check){
							$src = themify_get($field);
							$check = true;
						}
					}
				}
			} else {
				if(in_the_loop()){
					$fields = array("Feature Image", "feature_image", "Post Image", "post_image", "image");
					foreach($fields as $field){
						if(get_post_meta($post->ID, $field, true) != '' && !$check){
							$src = get_post_meta($post->ID, $field, true);
							$check = true;	
						}
					}
					if(function_exists("has_post_thumbnail")){
						if(has_post_thumbnail() && !$check){
							$temp = themify_prep_image(get_the_post_thumbnail());
							$src = $temp['src'];
							$class .= " ".$temp['class'];
							if($alt == "" && $temp['alt'] != '' && isset($temp['alt'])){
								$alt = $temp['alt'];									 
							}
							$check = true;
						}
					}
					if(!$check){
						$tags = array("img","embed","iframe");
						$content = get_the_content();
						foreach($tags as $tag){
							$count = substr_count($content, '<'.$tag);
							if($count >= 1 && !$check){
								$start = strpos($content, '<'.$tag, 0);
								$pos = substr($content, $start);
								$end = strpos($pos, '>');
								$temp = themify_prep_image(substr($pos, 0, $end+1));
								$ext = explode(".", $temp['src']);
								$ext = strtolower($ext[(count($ext)-1)]);
								if(strpos($temp['src'],".") && ($ext == "jpg" || $ext == "jpeg" || $ext == "gif" || $ext == "png")){
									$check = true;
									$src = $temp['src'];
									$class .= $temp['class'];
									if($alt = "" && $temp['alt'] != '' && isset($temp['alt'])){
										$alt = $temp['alt'];									 
									}
								}
							}
						}
					}
				}
			}
		}
		if(in_the_loop() && themify_check('image_width') && !$ignore){
			$width = themify_get('image_width');
		} elseif($data["setting-".$setting."_width"] != '' && $setting != ''){
			$width = $data["setting-".$setting."_width"];
		} elseif($image_width != '' && isset($image_width) && !$ignore){
			$width = $image_width;
		} else {
			if($w != '' && isset($w)){
				$width = $w;	
			}
		}
		if(in_the_loop() && themify_check('image_width') && !$ignore){
			$height = themify_get('image_height');
		} elseif($data["setting-".$setting."_height"] != '' && $setting != ''){
			$height = $data["setting-".$setting."_height"];
		} elseif($image_height != '' && isset($image_height) && !$ignore){
			$height = $image_height;
		} else {
			if($h != '' && isset($h)){
				$height = $h;	
			}
		}
		if($class != ''){	
			$class = "class='".$class."'";
		}
		if($id != ''){
			$id = "id='".$id."'";
		}
		
		$p_height = (isset($height) && $height != '') ? "height='".$height."'" : "";
		$p_width = (isset($width) && $width != '') ? "width='".$width."'" : "";
		
		//$new_img_path = image_resize( $src, $width, $height, true );
		//$new_img_size = getimagesize( $new_img_path );
		//$new_img = str_replace( basename( $image_src[0] ), basename( $new_img_path ), $image_src[0] );
		//return "<img src='".$new_img."' $p_width $p_height>";
		
		if($src != '' && $src && isset($src)){			
			if(themify_check('setting-img_settings_use')){
				return "<img src='$src' alt='' $p_width $p_height>";
			} else {
				return stripslashes($before)."<img src='".get_bloginfo("template_directory")."/themify/img.php?src=".$src."&amp;w=".$width."&amp;h=".$height.$crop.$q."' alt='".$alt."' ".$class." ".$id." $p_width $p_height />".stripslashes($after);
			}
		}
	}
	
	///////////////////////////////////////////
	// Image Helper - Prep Image
	///////////////////////////////////////////
	function themify_prep_image($tag){
		preg_match_all('/(alt|title|src|class)=("[^"]*")/i', $tag, $image);
		foreach($image[0] as $attr){
			parse_str($attr, $tempAttr);
			foreach($tempAttr as $key => $val){
				$tempArray[$key] = str_replace(array('"',"'"),array('',''),$val);	
			}
		}
		$image = $tempArray;
		if(strpos($image['src'],"youtube.com") || strpos($image['src'], "vimeo.com")){
			$image['src'] = themify_video_image($image['src']);
		}
		return array("src"=>trim($image['src'],"\\"), "alt"=>$image['alt'], "title"=>$image['title']);
	}

	///////////////////////////////////////////
	// Vimeo / Youtube Thumbnail grab
	///////////////////////////////////////////
	function themify_video_image($url){
		$image_url = parse_url($url);
		if($image_url['host'] == 'www.youtube.com' || $image_url['host'] == 'youtube.com'){
			parse_str($image_url['query'], $query);
			if(isset($query['v']) && $query['v'] != ""){
				$id = $query['v'];
			} else {
				$path = explode("/",$image_url['path']);
				$id = $path[count($path)-1];
			}
			return "http://img.youtube.com/vi/".$id."/hqdefault.jpg";				
		} else if($image_url['host'] == 'www.vimeo.com' || $image_url['host'] == 'vimeo.com' || $image_url['host'] == 'player.vimeo.com'){
			parse_str($image_url['query'], $query);
			if(isset($query['clip_id']) && $query['clip_id'] != ""){
				$id = $query['clip_id'];
			} else {
				$path = explode("/",$image_url['path']);
				$id = $path[(count($path)-1)];
			}
			if(function_exists("file_get_contents")){
				$hash = unserialize(file_get_contents("http://vimeo.com/api/v2/video/".$id.".php"));
				if(isset($hash[0]) && $hash[0] != ''){
					return $hash[0]["thumbnail_large"]; 
				}
			}
		}
	}
	
	///////////////////////////////////////////
	// Image Resize
	///////////////////////////////////////////
	function themify_image_resize( $img_url = null, $width, $height, $crop = false ) {
		// not using
		$attach_id = null;
		if ( $attach_id ) {
			$image_src = wp_get_attachment_image_src( $attach_id, 'full' );
			$file_path = get_attached_file( $attach_id );
		} else if ( $img_url ) {
			$file_path = parse_url( $img_url );
			$file_path = $_SERVER['DOCUMENT_ROOT'] . $file_path['path'];
			//$file_path = ltrim( $file_path['path'], '/' );
			//$file_path = rtrim( ABSPATH, '/' ).$file_path['path'];
			$orig_size = getimagesize( $file_path );
			$image_src[0] = $img_url;
			$image_src[1] = $orig_size[0];
			$image_src[2] = $orig_size[1];
		}
		$file_info = pathinfo( $file_path );
		$extension = '.'. $file_info['extension'];
		$no_ext_path = $file_info['dirname'].'/'.$file_info['filename'];
		$cropped_img_path = $no_ext_path.'-'.$width.'x'.$height.$extension;
		if ( $image_src[1] > $width || $image_src[2] > $height ) {
			if ( file_exists( $cropped_img_path ) ) {
				$cropped_img_url = str_replace( basename( $image_src[0] ), basename( $cropped_img_path ), $image_src[0] );
				$vt_image = array (
					'url' => $cropped_img_url,
					'width' => $width,
					'height' => $height
				);
				return $vt_image;
			}
			if ( $crop == false ) {
				$proportional_size = wp_constrain_dimensions( $image_src[1], $image_src[2], $width, $height );
				$resized_img_path = $no_ext_path.'-'.$proportional_size[0].'x'.$proportional_size[1].$extension;			if ( file_exists( $resized_img_path ) ) {
					$resized_img_url = str_replace( basename( $image_src[0] ), basename( $resized_img_path ), $image_src[0] );
					$vt_image = array (
						'url' => $resized_img_url,
						'width' => $proportional_size[0],
						'height' => $proportional_size[1]
					);
					return $vt_image;
				}
			}
			$new_img_path = image_resize( $file_path, $width, $height, $crop );
			$new_img_size = getimagesize( $new_img_path );
			$new_img = str_replace( basename( $image_src[0] ), basename( $new_img_path ), $image_src[0] );
			$vt_image = array (
				'url' => $new_img,
				'width' => $new_img_size[0],
				'height' => $new_img_size[1]
			);
			return $vt_image;
		}
		$vt_image = array (
			'url' => $image_src[0],
			'width' => $image_src[1],
			'height' => $image_src[2]
		);
		return $vt_image['url'];
	}

	///////////////////////////////////////////
	// Version Checker
	///////////////////////////////////////////
	function themify_check_version(){
	
		//$response = download_url('http://themify.me/files/themify/themify.zip');
		
		/*
		global $themify_globals;
		$version = $themify_globals['version'];
		$theme = $themify_globals['theme'];
		if($_GET['success'] == "true" && $_GET['upgrade_type'] == "theme"){
			$themify_globals['notifications']['theme_upgrade'] = "<p class='success'>Successfully updgraded ".$theme['Name']." to version ".$theme['Version']."</p>";	
		}
		if($_GET['success'] == "true" && $_GET['upgrade_type'] == "framework"){
			$themify_globals['notifications']['framework_upgrade'] = "<p class='success'>Successfully updgraded the Themify framework to version ".$version."</p>";	
		}
		$versions = themify_get_file('http://themify.me/versions/versions.xml');
		if(isset($versions) && $versions != ""){
			$versions = themify_xml2array($versions);
			foreach($versions['versions']['_c']['version'] as $update){
				if($update['_a']['free'] == "true"){
					$login = "";
				} else {
					$login = "login";	
				}
				$latest = str_replace(".","",trim($update['_v']));
				if($update['_a']['name'] == 'themify'){
					if(str_replace(".","",trim($version)) < $latest){
						if(function_exists("curl_init") && class_exists('ZipArchive')){
							$class = "upgrade-framework";	
							$target = "";
							$url = "#";
						} else {
							$class = "";
							$target = "_blank";
							$url = "http://themify.me/files/themify/themify.zip";
						}
						$themify_globals['notifications']['framework_upgrade_notice'] = "<p class='update ".$login."'>Framework version ".$update['_v']." is now available. <a href='".$url."' title='' class='".$class."' target='".$target."'>Update now</a> or view the <a href='http://themify.me/logs/' title='' class='' target='_blank'>change log</a> for details.</p>";	
					}
				} else if($update['_a']['name'] == strtolower(trim($theme['Name']))){
					if(str_replace(".","",$theme['Version']) < $latest){
						if(function_exists("curl_init") && class_exists('ZipArchive')){
							$class = "upgrade-theme";	
							$target = "";
							$url = "#";
						} else {
							$class = "";
							$target = "blank";
							$url = "http://themify.me/files/".strtolower($theme['Name'])."/".strtolower($theme['Name']).".zip";
						}
						$themify_globals['notifications']['theme_upgrade_notice'] = "<p class='update ".$login."'>".$theme['Name']." version ".$update['_v']." is now available. <a href='".$url."' title='' class='".$class."' target='".$target."'>Update now</a> or view the <a href='http://themify.me/logs/' title='' class='' target='_blank'>change log</a> for details.</p>";	
					}
				}
			}
		}
		*/
	}
	
	///////////////////////////////////////////
	// Variable Checker
	///////////////////////////////////////////
	function themify_check($var){
		global $post;
		$data = themify_get_data();
		if($data[$var] != '' && isset($data[$var]) && isset($data[$var])){
			return true;
		} else if(get_post_meta($post->ID, $var, true) != '' && get_post_meta($post->ID, $var, true)){
			return true;
		} else {
			return false;	
		}
	}
	
	///////////////////////////////////////////
	// Version Getter
	///////////////////////////////////////////
	function themify_get($var, $default = ""){
		global $post;
		$data = themify_get_data();
		if($data[$var] != '' && isset($data[$var])){
			return $data[$var];
		} else if(get_post_meta($post->ID, $var, true) != ''){
			return get_post_meta($post->ID, $var, true);
		} else {
			return $default;
		}
	}
		
	///////////////////////////////////////////
	// Themify Shortcodes
	///////////////////////////////////////////
	function themify_shortcode($atts, $content=null, $code=""){
		switch($code){
			case 'is_logged_in':
				$user_info = get_userdata(1);
				extract( shortcode_atts( array('level' => ""), $atts ) );
				if($level != ""){
					if(is_user_logged_in() &&  $user_info->user_level >= $level){
						return do_shortcode($content);
					}
				} else {
					if(is_user_logged_in()){
						return do_shortcode($content);
					}
				}												
			break;
			case 'is_guest':
				if(!is_user_logged_in()){
					return do_shortcode($content);
				}
			break;
			case 'button':
				extract( shortcode_atts( array(	'color' => "",
											   	'size' 	=> "",
												'style'	=> "",
												'link' 	=> "#",
												'target'=> "",
												'text'	=> ""
												), $atts ) );	
				if($color != ''){
					$color = "background: $color;";
				}
				if($text != ''){
					$text = "color: $text;";	
				}
				return '<a href="'.$link.'" class="button '.$style.' '.$size.'" style="'.$color.$text.'" target="'.$target.'">'.do_shortcode($content).'</a>';
			break;
			case 'quote':
				return '<blockquote>'.do_shortcode($content).'</blockquote>';
			break;
			case 'col':
				extract( shortcode_atts( array( 'grid' => ""), $atts));
				return "<div class='col$grid'>".do_shortcode($content)."</div>";
			break;
			case 'img':
				extract( shortcode_atts( array(	'class' => "",
												'src' 	=> "",
												'id'	=> "",
												'h'		=> "",
												'w'		=> "",
												'crop'	=> true
												), $atts ) );	
				return themify_get_image("class=$class&src=$src&id=$id&h=$h&w=$w&crop=$crop");
			break;
			case 'hr':
				extract( shortcode_atts( array( 'color' => ""), $atts));
				return '<hr class="'.$color.'" />';
			break;
			case 'map':
				extract( shortcode_atts( array( 'address' => '99 Blue Jays Way, Toronto, Ontario, Canada', 'width' => "500px", 'height' => "300px", 'zoom' => 15), $atts));
				$num = rand(0,10000);
				return '<script type="text/javascript">	
						//<![CDATA[
  						  jQuery(function($){
						  	initialize("'.$address.'",'.$num.','.$zoom.');
						  });
						//]>
						</script>
						<div id="themify_map_canvas_'.$num.'" style="display: block;width:'.$width.';height:'.$height.';">&nbsp;</div>';
			break;
			case 'video':
				extract( shortcode_atts( array(	'width' => "500px", 
												'height' => "300px", 
												'src' => "#"), $atts));
				$num = rand(0,10000);
				return '<a href="'.$src.'" style="display:block;width:'.$width.';height:'.$height.'" id="themify_player_'.$num.'"></a>
				<script type="text/javascript">
				//<![CDATA[
					flowplayer("themify_player_'.$num.'", "'.get_bloginfo('template_directory').'/themify/js/flowplayer-3.2.5.swf", { clip: { autoPlay:false } });
				//]>	
				</script>';
			break;
		}
	}
		
	///////////////////////////////////////////
	// Create Recursive Directories
	///////////////////////////////////////////
	function themify_create_dirs($path){
		if (!is_dir($path)){
			$directory_path = "";
			$directories = explode("/",$path);
			array_pop($directories);
			foreach($directories as $directory){
				$directory_path .= $directory."/";
				if (!is_dir($directory_path)){
					mkdir($directory_path);
					chmod($directory_path, 0777);
				}
			}
		}
	}
	
	///////////////////////////////////////////
	// Recursive folder & file chmod change
	///////////////////////////////////////////
	function themify_chmodr($path, $filemode){ 
		if (!is_dir($path)) 
			return chmod($path, $filemode); 
		$dh = opendir($path); 
		while (($file = readdir($dh)) !== false) { 
			if($file != '.' && $file != '..') { 
				$fullpath = $path.'/'.$file; 
				if(is_link($fullpath)) 
					return FALSE; 
				elseif(!is_dir($fullpath) && !chmod($fullpath, $filemode)) 
						return FALSE; 
				elseif(!themify_chmodr($fullpath, $filemode)) 
					return FALSE; 
			} 
		} 
		closedir($dh); 
		if(chmod($path, $filemode)){ 
			return TRUE; 
		} else { 
			return FALSE; 
		}
	}
	
	///////////////////////////////////////////
	// Open & Return File Contents
	///////////////////////////////////////////
	function themify_get_file($url){
		if($fp=fopen($url, 'r')){
			$output = fread($fp, 9999);
			fclose($fp);
		} else if(function_exists('curl_init')){
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_POST, 1);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			$output = curl_exec($ch);
			curl_close($ch);
		}
		return ($output && isset($output) && $output != "") ? $output : false;
	}
	
	///////////////////////////////////////////
	// Get Current User Role
	///////////////////////////////////////////
	function themify_get_user_role(){
	    global $current_user;
	    get_currentuserinfo();
	    $user_roles = $current_user->roles;
	    $user_role = array_shift($user_roles);
	    return $user_role;
	}	
	
?>